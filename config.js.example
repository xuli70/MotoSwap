/**
 * config.js.example - Configuraci√≥n para Desarrollo Local
 * 
 * INSTRUCCIONES:
 * 1. Copiar este archivo como 'config.js' en el mismo directorio
 * 2. Modificar los valores con tus credenciales reales
 * 3. NUNCA commitear config.js al repositorio (est√° en .gitignore)
 * 4. Solo usar para desarrollo local, NO para producci√≥n
 */

// Configuraci√≥n para desarrollo local
window.APP_CONFIG = {
    // === OBLIGATORIAS - Supabase ===
    // Obtener de tu proyecto Supabase: Settings ‚Üí API
    SUPABASE_URL: 'https://tuproyecto.supabase.co',  // Cambiar por tu URL real
    SUPABASE_ANON_KEY: 'eyJ...tu_clave_anonima_aqui',  // Cambiar por tu clave real
    
    // === OBLIGATORIAS - Autenticaci√≥n ===
    PASSWORD_USER: 'usuario123',      // Contrase√±a para usuarios regulares
    PASSWORD_ADMIN: 'admin123',       // Contrase√±a para administradores
    
    // === OPCIONALES - IA ===
    OPENAI_API_KEY: '',               // Opcional: para funciones de IA
    AI_MODEL: 'gpt-4o-mini',         // Modelo de IA por defecto
    
    // === CONFIGURACI√ìN DE APLICACI√ìN ===
    APP_NAME: 'MotoSwap',
    ENVIRONMENT: 'development',
    VERSION: '1.0.0',
    
    // === CONFIGURACI√ìN DE SEGURIDAD ===
    SECURITY_ENABLED: true,
    SECURITY_STRICT: false,          // No ser agresivo en desarrollo
    SECURITY_DISABLE_CONTEXT: false, // Permitir click derecho en desarrollo
    SECURITY_DISABLE_DEVKEYS: false, // Permitir F12 en desarrollo
    
    // === FEATURES ===
    FEATURES: {
        MESSAGING: true,              // Sistema de mensajer√≠a
        REVIEWS: true,                // Sistema de valoraciones
        ADVANCED_SEARCH: true,        // B√∫squeda avanzada
        NOTIFICATIONS: false,         // Notificaciones (futuro)
        DEBUG_MODE: true              // Logs extra para desarrollo
    }
};

// Compatibilidad dual para c√≥digo legacy
window.env = {
    SUPABASE_URL: window.APP_CONFIG.SUPABASE_URL,
    SUPABASE_ANON_KEY: window.APP_CONFIG.SUPABASE_ANON_KEY,
    PASSWORD_USER: window.APP_CONFIG.PASSWORD_USER,
    PASSWORD_ADMIN: window.APP_CONFIG.PASSWORD_ADMIN,
    OPENAI_API_KEY: window.APP_CONFIG.OPENAI_API_KEY,
    AI_MODEL: window.APP_CONFIG.AI_MODEL,
    ENVIRONMENT: 'development'
};

// Funci√≥n de validaci√≥n para desarrollo
window.validateConfig = function() {
    const config = window.APP_CONFIG;
    
    console.log('üè† DESARROLLO LOCAL - Validando configuraci√≥n...');
    
    // Verificar Supabase
    if (!config.SUPABASE_URL || config.SUPABASE_URL.includes('tuproyecto')) {
        console.warn('‚ö†Ô∏è SUPABASE_URL no configurada. Usando datos mock.');
        console.warn('üí° Para usar datos reales: configurar SUPABASE_URL en config.js');
        return false;
    }
    
    if (!config.SUPABASE_ANON_KEY || config.SUPABASE_ANON_KEY.includes('tu_clave')) {
        console.warn('‚ö†Ô∏è SUPABASE_ANON_KEY no configurada. Usando datos mock.');
        console.warn('üí° Para usar datos reales: configurar SUPABASE_ANON_KEY en config.js');
        return false;
    }
    
    // Validar formato
    if (!config.SUPABASE_URL.startsWith('https://')) {
        console.error('‚ùå SUPABASE_URL debe comenzar con https://');
        return false;
    }
    
    if (!config.SUPABASE_ANON_KEY.startsWith('eyJ')) {
        console.error('‚ùå SUPABASE_ANON_KEY debe comenzar con eyJ');
        return false;
    }
    
    console.log('‚úÖ Configuraci√≥n de Supabase v√°lida');
    console.log('üóÑÔ∏è Conectando con base de datos real...');
    
    return true;
};

// Funci√≥n de inicializaci√≥n para desarrollo
window.initializeApp = function() {
    console.log('üè† Inicializando MotoSwap en modo DESARROLLO...');
    console.log('üêõ Debug mode:', window.APP_CONFIG.FEATURES.DEBUG_MODE ? 'ON' : 'OFF');
    
    // En desarrollo, validaci√≥n m√°s permisiva
    const hasSupabase = window.validateConfig();
    
    if (!hasSupabase) {
        console.log('üìù Usando datos mock para desarrollo');
        console.log('üí° TIP: Configurar Supabase para usar datos reales');
    }
    
    // Inicializar seguridad (modo menos estricto)
    if (window.MotoSwapSecurity) {
        window.MotoSwapSecurity.configure({
            strict: false,      // No ser estricto en desarrollo
            disableContext: false,  // Permitir click derecho
            disableDevKeys: false   // Permitir F12
        });
        console.log('üõ°Ô∏è Seguridad configurada para desarrollo');
    }
    
    // Inicializar Supabase si est√° configurado
    if (hasSupabase && window.supabase) {
        try {
            window.supabaseClient = window.supabase.createClient(
                window.APP_CONFIG.SUPABASE_URL,
                window.APP_CONFIG.SUPABASE_ANON_KEY
            );
            console.log('üóÑÔ∏è Cliente Supabase inicializado');
        } catch (error) {
            console.error('‚ùå Error inicializando Supabase:', error.message);
            console.log('üìù Continuando con datos mock...');
        }
    }
    
    console.log('‚úÖ MotoSwap (desarrollo) inicializado');
    return true;
};

// Herramientas de desarrollo
window.MotoSwapDev = {
    // Mostrar configuraci√≥n actual
    showConfig: function() {
        console.table(window.APP_CONFIG);
    },
    
    // Toggle debug mode
    toggleDebug: function() {
        window.APP_CONFIG.FEATURES.DEBUG_MODE = !window.APP_CONFIG.FEATURES.DEBUG_MODE;
        console.log('üêõ Debug mode:', window.APP_CONFIG.FEATURES.DEBUG_MODE ? 'ON' : 'OFF');
    },
    
    // Toggle feature
    toggleFeature: function(feature) {
        if (window.APP_CONFIG.FEATURES.hasOwnProperty(feature)) {
            window.APP_CONFIG.FEATURES[feature] = !window.APP_CONFIG.FEATURES[feature];
            console.log(`üéõÔ∏è Feature ${feature}:`, window.APP_CONFIG.FEATURES[feature] ? 'ON' : 'OFF');
        } else {
            console.log('‚ùå Feature not found:', feature);
        }
    },
    
    // Probar conexi√≥n Supabase
    testSupabase: async function() {
        if (!window.supabaseClient) {
            console.log('‚ùå Supabase no configurado');
            return;
        }
        
        try {
            const { data, error } = await window.supabaseClient
                .from('users')
                .select('count')
                .limit(1);
            
            if (error) throw error;
            console.log('‚úÖ Conexi√≥n Supabase OK');
        } catch (error) {
            console.error('‚ùå Error probando Supabase:', error.message);
        }
    }
};

// Log de inicializaci√≥n
console.log('üè† config.js cargado para DESARROLLO LOCAL');
console.log('üîç Validando configuraci√≥n...');

// Auto-validaci√≥n
window.validateConfig();

// Mostrar herramientas disponibles
console.log('üõ†Ô∏è Herramientas de desarrollo disponibles:');
console.log('   MotoSwapDev.showConfig() - Mostrar configuraci√≥n');
console.log('   MotoSwapDev.toggleDebug() - Toggle debug mode');
console.log('   MotoSwapDev.toggleFeature("FEATURE_NAME") - Toggle feature');
console.log('   MotoSwapDev.testSupabase() - Probar conexi√≥n BD');

/**
 * PASOS PARA CONFIGURAR:
 * 
 * 1. OBTENER CREDENCIALES SUPABASE:
 *    - Ir a https://app.supabase.com
 *    - Crear/seleccionar proyecto
 *    - Settings ‚Üí API
 *    - Copiar URL y anon key
 * 
 * 2. CONFIGURAR config.js:
 *    - Copiar este archivo como config.js
 *    - Reemplazar SUPABASE_URL con tu URL real
 *    - Reemplazar SUPABASE_ANON_KEY con tu clave real
 *    - Ajustar contrase√±as si necesario
 * 
 * 3. TESTING:
 *    - Abrir index.html en navegador
 *    - Verificar console: "Cliente Supabase inicializado"
 *    - Probar: MotoSwapDev.testSupabase()
 * 
 * 4. DEBUGGING:
 *    - Usar MotoSwapDev.showConfig() para ver configuraci√≥n
 *    - Activar debug: MotoSwapDev.toggleDebug()
 *    - Ver logs extra en console
 * 
 * 5. FEATURES:
 *    - Activar/desactivar: MotoSwapDev.toggleFeature("MESSAGING")
 *    - Probar diferentes funcionalidades
 *    - Verificar comportamiento en desarrollo
 */